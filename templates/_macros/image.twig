{# ================================================================== #}
{# Image
{# ================================================================== #}
{#
    {% import '_macros/image' as image %}
#}


{# ------------------------------------------------------------------ #}
{# Get Params
{# ------------------------------------------------------------------ #}
{#
  {% import '_macros/image' as image %}
  {{ image.getParams(transformKey, quality) }}

  Returns a params object that can be used for getting a srcset
#}

{%- macro getParams(transformKey, quality = 50) -%}
  {# Create the transforms #}
  {% set transforms = {
    "scale": {
      width: 10,
      mode: 'fit'
    },

    "1x1": {
      width: 10,
      height: 10,
      mode: 'crop'
    },

    "4x3": {
      width: 12,
      height: 9,
      mode: 'crop'
    },

    "16x9": {
      width: 16,
      height: 9,
      mode: 'crop'
    },
  } %}

  {# Set image params #}
  {% set transform = transforms[transformKey] %}
  {% set params = {
    w: transform.width,
    h: transform.height ?? null,
    q: quality,
    fit: transform.mode
  } %}
  {% return params %}
{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Background Image Srcset
{# ------------------------------------------------------------------ #}
{#
  {% import '_macros/image' as image %}
  <div class="lazyload" {{ image.bgSet(CraftAsset, { transform: '7x5' }) }}></div>

  Returns the attributes neccessary to load a background lazily.
#}

{%- macro bgSet(asset, options) -%}
{% apply spaceless %}
  {% import _self as image %}

  {# Animated GIFs #}
  {% if asset | length and asset.extension == 'gif' %}
    {% return image.bgImg(asset.url) %}
  {% endif %}

  {# Set the focal point #}
  {% set fpX = asset.focalPoint | first %}
  {% set fpY = asset.focalPoint | last %}

  {# Set some defaults #}
  {% set defaults = {
    transform: '7x5'
  } %}

  {# Merge options with defaults #}
  {% set options = defaults | merge(options) %}

  {# Get the image params #}
  {% set params = image.getParams(options.transform) | merge({
    'fp-x': fpX,
    'fp-y': fpY
  }) %}

  style="background-position: {{ fpX * 100 }}% {{ fpY * 100 }}%;"
  data-bgset="{{ _self.srcset(asset, params) }}" data-sizes="auto"
{% endapply %}
{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Background Image
{# ------------------------------------------------------------------ #}
{#
  {% import '_macros/image' as image %}
  {{ image.bgImg(imageUrl) }}

  Returns markup for a background image url
#}

{%- macro bgImg(imageUrl) -%}
style="background-image: url({{ imageUrl }});"
{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Image URL
{# ------------------------------------------------------------------ #}
{#
  {% import '_macros/image' as image %}
  {{ image.imgUrl(CraftAsset, { transform: '7x5' }, 50) }}

  Returns the URL for a single transformed image
#}

{%- macro imgUrl(asset, options, sizeMultiplier = 50) -%}
  {% import _self as image %}

  {# Animated GIFs #}
  {% if asset | length and asset.extension == 'gif' %}
    {% return asset.url %}
  {% endif %}

  {# Set some defaults #}
  {% set defaults = {
    transform: '7x5'
  } %}

  {# Merge options with defaults #}
  {% set options = defaults | merge(options) %}

  {# Get the image params #}
  {% set params = image.getParams(options.transform) %}

  {# Get scaled width and height #}
  {% set scaledWidth = params.w * sizeMultiplier %}
  {% set scaledHeight = params.h * sizeMultiplier %}

  {# Get updated params #}
  {% set transformParams = {
    width: scaledWidth < asset.width ? scaledWidth : asset.width,
    height: scaledHeight < asset.height ? scaledHeight : asset.height,
    mode: params.fit,
    quality: params.q
  } %}

  {% set transformedImage = craft.imager.transformImage(asset,
    { width: transformParams.width },
    {
      ratio: transformParams.width and transformParams.height ? (transformParams.width/transformParams.height) : null,
      auto: 'format,compress'
    })
  %}

  {% return transformedImage.url %}
{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Simple Lazy Image
{# ------------------------------------------------------------------ #}
{#
  {% import '_macros/image' as image %}
  {{ image.lazyImg(src, {
    alt: 'My alt text',
  }) }}
#}

{%- macro lazyImg(src, options = {}) -%}
  <img
    class="lazyimage lazyload"
    alt="{{ options.alt ??? '' }}"
    data-src="{{ src }}"
    src="{{ craft.imager.placeholder({ type: 'svg', width: 20, height: 20 }) }}"
  >
{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Img
{# ------------------------------------------------------------------ #}
{#
  {% import '_macros/image' as image %}
  {{ image.img(CraftAsset, {
    alt: 'My alt text',
    class: 'foo',
    transform: '7x5',
    lazy: true,
    wrapperClasses: ['image--fade'],
    size: 'full',
  }) }}

  Returns an <img> or <picture> for a Craft asset
#}

{%- macro img(asset, options) -%}
  {% import _self as image %}

  {# Set a default for img #}
  {% set img = null %}

  {# Animated GIFs #}
  {% if asset | length and asset.extension == 'gif' %}
    {% set img %}
      <img src="{{ asset.url }}" alt="{{ options.alt ??? asset.title ??? '' }}">
    {% endset %}
    {% return img %}
  {% endif %}

  {# Set some defaults #}
  {% set defaults = {
    alt: '',
    class: '',
    transform: '7x5',
    wrap: true,
    wrapperClasses: [],
    lazy: true,
    size: 'full',
  } %}

  {# Merge options with defaults #}
  {% set options = defaults | merge(options) %}

  {# Store the focal point #}
  {% set fpX = asset.focalPoint | first %}
  {% set fpY = asset.focalPoint | last %}

  {# Get the image params #}
  {% set fullParams = image.getParams(options.transform) | merge({
    'fp-x': fpX,
    'fp-y': fpY
  }) %}

  {# Get the width/height for the placeholder image #}
  {% set placeholderWidth = fullParams.w %}
  {% set assetRatio = asset.height / asset.width %}
  {% set placeholderHeight = fullParams.h ? fullParams.h : assetRatio * placeholderWidth %}

  {% set img %}
    <img
      class="{{ options.class }}"
      alt="{{ options.alt ??? asset.title ??? '' }}"
      width="{{ placeholderWidth }}"
      height="{{ placeholderHeight }}"
      style="object-position: {{ fpX * 100 }}% {{ fpY * 100 }}%;"
      decoding="async"
      {{ _self.srcset(asset, fullParams, options.size) }}
      {% if options.lazy %}
        loading="lazy"
      {% endif %}
    >
  {% endset %}

  {# Return the element #}
  {% if options.wrap %}
    {% return _self.wrap(img, asset, options) | raw %}
  {% else %}
    {{ img | raw }}
  {% endif %}

{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Wrap Image
{# ------------------------------------------------------------------ #}
{#
  {{ _self.wrap(image, asset, options) }}

  Wraps an image in common markup.

  @param image (HTML)                       - [required] The HTML markup (e.g. <img>, <picture>, etc) to wrap
  @param asset (CraftAsset)                 - [required] Asset to use for <noscript> fallback
  @param options.transform (String)         - [required] Transform to use for <noscript> fallback
  @param options.wrapperClasses (String[])  - [optional] Array of classes too add to image
#}

{%- macro wrap(image, asset, options = {}) -%}
{% import _self as image %}
{% import '_macros/class-modifiers' as classModifiers %}
{% set classes = classModifiers.set('image', options.wrapperClasses ?? []) %}
{% set wrappedImg %}
<div class="image {{ classes }}" data-module-reveal>
  <div class="image__inner">
    {{ image | raw }}
  </div>
</div>
{% endset %}
{% return wrappedImg | raw %}
{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Srcset
{# ------------------------------------------------------------------ #}
{#
  {{ _self.srcset(CraftAsset, params) }}

  Returns a "srcset" and "sizes" attribute for a Craft asset
#}

{%- macro srcset(asset, params, size = 'full') -%}
  {% set transformedImages = craft.imager.transformImage(asset,
    [{ width: 600 }, { width: 3000 }],
    {
      ratio: params.w and params.h ? (params.w/params.h) : null,
      auto: 'format,compress',
      'fp-x': params['fp-x'],
      'fp-y': params['fp-y']
    },
    {
      fillTransforms: true,
      fillInterval: 600,
    })
  %}
  {# Output #}
  srcset="{{ craft.imager.srcset(transformedImages) }}"

  {# Get the sizes #}
  {{ _self.getSizes(size) }}
{%- endmacro -%}


{# ------------------------------------------------------------------ #}
{# Get Sizes
{# ------------------------------------------------------------------ #}
{#
  {{ image.getSizes(size) }}

  Returns the "sizes" atrribute for an image
#}
{% macro getSizes(size = 'full') %}
  {% switch size %}
    {% case 'full' %}
      sizes="100vw"

    {% case 'half' %}
      sizes="(min-width: 768px) 50vw,
      100vw"

    {% case 'third' %}
      sizes="(min-width: 1440px) 33vw,
      (min-width: 768px) 50vw,
      100vw"
  {% endswitch %}
{% endmacro %}
