@use 'sass:color';
@use 'sass:map';
@use 'sass:math';

// ===============================================================
// Site Wide Variables
// ===============================================================

/*
  Variables that help define the design system across the site,
  including things like colors, spacing, typography,
  transitions, ratios, z-index, and more.
*/

// ---------------------------------------------------------------
// Colors
// ---------------------------------------------------------------
/*
  Each color will be available to use through a CSS custom property.
  Example: `color: var(--color-black);`
*/

:root {
  --color-black: #000;
  --color-white: #fff;
}

// ---------------------------------------------------------------
// Media Queries
// ---------------------------------------------------------------
/*
  Each breakpoint can be used by the `media` provided by include-media,
  most commonly used as `@include media('>=medium') { … }`

  https://www.npmjs.com/package/include-media
*/

$breakpoints: (
  small: 500px,
  medium: 768px,
  large: 1024px,
  xlarge: 1280px,
  full: 1440px,
  content-max: 1400px,
  max: 1600px,
);

// Variants
$breakpoints: map.merge(
  $breakpoints,
  (
    nav-full: map.get($breakpoints, large),
  )
);

// Add breakpoints as CSS variables
:root {
  @each $name, $size in $breakpoints {
    --mq-bp-#{$name}: #{$size};
  }
}

// ---------------------------------------------------------------
// Spacing
// ---------------------------------------------------------------
/*
  Fluid sizes smoothly adjust a value across a range of breakpoints,
  with precise control over the value at each breakpoint. Most often
  used for `margin` and `padding`..

  Only the `default` key for each set is required, so you can
  store static spacing values here as well and apply spacing consistently
  across the site.

  Most commonly used via CSS variable, such as `margin-top: var(--size-32);`

  https://github.com/cmalven/sass-toolkit#size
*/

$sizes: (
  none: (
    default: 0px,
    max: 0px,
  ),
  outer: (
    default: 25px,
    max: math.div(
        map.get($breakpoints, max) - map.get($breakpoints, content-max),
        2
      ),
  ),
  block-vertical: (
    default: 50px,
    max: 100px,
  ),
  grid-gutter: (
    default: 20px,
    max: 40px,
  ),

  8: (
    default: 8px,
  ),
  12: (
    default: 12px,
  ),
  16: (
    default: 16px,
  ),
  24: (
    default: 24px,
  ),
  32: (
    default: 32px,
  ),
  40: (
    default: 40px,
  ),
  48: (
    default: 48px,
  ),
  56: (
    default: 56px,
  ),
  64: (
    default: 64px,
  ),
  80: (
    default: 64px,
    full: 80px,
  ),
  96: (
    default: 64px,
    max: 96px,
  ),
  128: (
    default: 64px,
    max: 128px,
  ),
  256: (
    default: 64px,
    max: 256px,
  ),
);

// ---------------------------------------------------------------
// Z-Index
// ---------------------------------------------------------------

:root {
  --z-index-dialog: 200;
  --z-index-global-header: 100;
}

// ---------------------------------------------------------------
// Grid
// ---------------------------------------------------------------

:root {
  --grid-columns: 12;
  --grid-gutter: var(--size-grid-gutter);
}

// ---------------------------------------------------------------
// Aspect Ratio
// ---------------------------------------------------------------

:root {
  --aspect-ratio-4x3: 4 / 3;
}

// ---------------------------------------------------------------
// Easing
// ---------------------------------------------------------------

:root {
  --ease-linear: cubic-bezier(0.25, 0.25, 0.75, 0.75);
  --ease-in-sine: cubic-bezier(0.47, 0, 0.745, 0.715);
  --ease-in-quad: cubic-bezier(0.55, 0.085, 0.68, 0.53);
  --ease-in-cubic: cubic-bezier(0.55, 0.055, 0.675, 0.19);
  --ease-in-quart: cubic-bezier(0.895, 0.03, 0.685, 0.22);
  --ease-in-quint: cubic-bezier(0.755, 0.05, 0.855, 0.06);
  --ease-in-expo: cubic-bezier(0.95, 0.05, 0.795, 0.035);
  --ease-in-circ: cubic-bezier(0.6, 0.04, 0.98, 0.335);
  --ease-in-back: cubic-bezier(0.6, -0.28, 0.735, 0.045);
  --ease-out-sine: cubic-bezier(0.39, 0.575, 0.565, 1);
  --ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
  --ease-out-cubic: cubic-bezier(0.215, 0.61, 0.355, 1);
  --ease-out-quart: cubic-bezier(0.165, 0.84, 0.44, 1);
  --ease-out-quint: cubic-bezier(0.23, 1, 0.32, 1);
  --ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);
  --ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);
  --ease-out-back: cubic-bezier(0.175, 0.885, 0.32, 1.275);
  --ease-in-out-sine: cubic-bezier(0.445, 0.05, 0.55, 0.95);
  --ease-in-out-quad: cubic-bezier(0.455, 0.03, 0.515, 0.955);
  --ease-in-out-cubic: cubic-bezier(0.645, 0.045, 0.355, 1);
  --ease-in-out-quart: cubic-bezier(0.77, 0, 0.175, 1);
  --ease-in-out-quint: cubic-bezier(0.86, 0, 0.07, 1);
  --ease-in-out-expo: cubic-bezier(1, 0, 0, 1);
  --ease-in-out-circ: cubic-bezier(0.785, 0.135, 0.15, 0.86);
  --ease-in-out-back: cubic-bezier(0.68, -0.55, 0.265, 1.55);
  --ease-wipe: cubic-bezier(0.4, 0, 0.05, 1);
  --ease-slide: cubic-bezier(0.6, 0, 0.001, 1);
}

// ---------------------------------------------------------------
// Transitions
// ---------------------------------------------------------------

:root {
  --transition-hover-color: 0.5s var(--ease-out-quint);
}

// ---------------------------------------------------------------
// Type – Font Stacks
// ---------------------------------------------------------------
/*
  Font stacks are a collection of font family, weight, and style
  that can be easily reused by the `$type-styles` below.

  https://github.com/cmalven/sass-toolkit#type-styles
*/

$font-stacks: (
  system: (
    font-family: (
      system-ui,
      blinkmacsystemfont,
      -apple-system,
      'Segoe UI',
      'Roboto',
      'Oxygen',
      'Ubuntu',
      'Cantarell',
      'Fira Sans',
      'Droid Sans',
      'Helvetica Neue',
      sans-serif,
    ),
    font-weight: normal,
    font-style: normal,
  ),
  helvetica: (
    font-family: (
      'Helvetica Neue',
      arial,
      sans-serif,
    ),
    font-weight: normal,
    font-style: normal,
  ),
);

// ---------------------------------------------------------------
// Type – Styles
// ---------------------------------------------------------------
/*
  Type styles are combinations of font, responsive sizing, and
  other text styles that can be easily reused across the site.
  Most commonly used as `@include type-style(body-1)`

  At very large font sizes, it can be helpful to use the `fluid: true`
  and `px` values to fluidly scale the font size across breakpoints
  rather than the default of jumping immediately to the new size.

  https://github.com/cmalven/sass-toolkit#type-styles
*/

$type-styles: (
  body-1: (
    stack: helvetica,
    sizes: (
      default: (
        font-size: 1.3rem,
        line-height: 1.4,
      ),
      medium: 2.7rem,
    ),
  ),
);
